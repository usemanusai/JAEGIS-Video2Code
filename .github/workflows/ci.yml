name: CI

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write

    # Pass repository secrets to all docker compose commands securely
    env:
      OPENROUTER_API_KEYS: ${{ secrets.OPENROUTER_API_KEYS }}
      OPENROUTER_MODEL: ${{ secrets.OPENROUTER_MODEL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Show Docker and Compose versions
        run: |
          docker --version
          docker compose version

      - name: Install Trivy and jq (for security gate)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq wget gnupg
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb stable main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Build and start services (CI override without host ports)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d --build
          # Wait briefly for services to be ready before running unit/integration tests
          sleep 3


      - name: Python unit tests (video-processor) with coverage gate
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm video-processor pytest -q --cov=. --cov-fail-under=60

      - name: Node unit tests (ai-gateway)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm ai-gateway npm test

      - name: Frontend unit tests
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm frontend npm test

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            ai-gateway/coverage
            frontend/coverage

      - name: Integration test (upload → frames → results)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.test.yml -f docker-compose.ci.yml run --rm test-runner

      - name: Lint frontend
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm frontend npm run lint

      - name: Security gate (fail CI on High/Critical) on protected branches
        if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/release/') }}
        run: |
          set -e
          # Require artifact from previous VIGIL? Instead, do a quick Trivy FS with severity filter for gating speed.
          mkdir -p vigil-reports
          trivy fs --scanners vuln --severity HIGH,CRITICAL --ignore-unfixed --format json --output vigil-reports/trivy-ci-gate.json . || true
          count=$(jq '[.Results[]?.Vulnerabilities[]?] | length' vigil-reports/trivy-ci-gate.json 2>/dev/null || echo 0)
          echo "High/Critical count: $count"
          if [ "$count" -gt 0 ]; then
            echo "High/Critical vulnerabilities detected on protected branch. Failing CI." >&2
            exit 1
          else
            echo "No High/Critical vulnerabilities."
          fi

      - name: Lint ai-gateway
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm ai-gateway npm run lint

      - name: Python formatting check (black)
        run: |
          docker compose run --rm video-processor black --check . || (docker compose run --rm video-processor black --diff .; exit 1)

