name: VIGIL Daily Security Scan

on:
  schedule:
    - cron: '17 3 * * *'
  workflow_dispatch:
  repository_dispatch:
    types: [vigil-run]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  vigil-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      security-events: write
      actions: read
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq || true
          npm -g i license-checker || true
          pip install --no-cache-dir pip-audit
      - name: Prepare report directory
        run: mkdir -p vigil-reports


      - name: Trivy scan (filesystem)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'vigil-reports/trivy-fs.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
      - name: Upload Trivy FS SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: vigil-reports/trivy-fs.sarif
      - name: Trivy scan (filesystem JSON)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'vigil-reports/trivy-fs.json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Trivy scan (compose images)
        run: |
          set -e
          mkdir -p vigil-reports
          docker --version
          docker compose version
          docker compose build
          images=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep '^video2code-' || true)
          for img in $images; do
            echo "Scanning $img"
            trivy image --format json --output "vigil-reports/trivy-image-$(echo $img | tr '/:' '_').json" --severity HIGH,CRITICAL --ignore-unfixed --exit-code 0 "$img" || true
          done

      - name: npm audit (frontend)
        run: |
          mkdir -p vigil-reports
          cd frontend && npm ci --no-audit --fund=false && npm audit --json > ../vigil-reports/npm-audit-frontend.json || true

      - name: npm audit (ai-gateway)
        run: |
          mkdir -p vigil-reports
          cd ai-gateway && npm ci --no-audit --fund=false && npm audit --json > ../vigil-reports/npm-audit-ai-gateway.json || true

      - name: pip-audit (video-processor)
        run: |
          mkdir -p vigil-reports
          cd video-processor && pip-audit -f json -o ../vigil-reports/pip-audit-video-processor.json || true

      - name: License report (Node)
        run: |
          mkdir -p vigil-reports
          npx --yes license-checker --json > vigil-reports/licenses.json || true

      - name: Generate daily report
        id: report
        run: |
          ts=$(date +%F)
          mkdir -p vigil-reports
          REPORT="vigil-reports/VIGIL_REPORT-$ts.md"
          echo "# VIGIL Report - $ts" > "$REPORT"
          echo "\n## Summary" >> "$REPORT"
      - name: Summarize license issues in report
        run: |
          mkdir -p vigil-reports
          echo "\n## License Summary" >> ${{ steps.report.outputs.report }}
          if [ -f vigil-reports/licenses.json ]; then
            policy=$(cat .github/vigil-license-policy.txt 2>/dev/null || echo 'GPL|AGPL|LGPL|SSPL|BUSL')
            problem_count=$(jq --arg policy "$policy" 'to_entries | map(select(.value.licenses | test($policy))) | length' vigil-reports/licenses.json 2>/dev/null || echo 0)
            echo "Potentially problematic licenses ($policy): $problem_count" >> ${{ steps.report.outputs.report }}
            jq -r --arg policy "$policy" 'to_entries | map(select(.value.licenses | test($policy))) | .[] | "- \(.key): \(.value.licenses)"' vigil-reports/licenses.json 2>/dev/null || true >> ${{ steps.report.outputs.report }}
          else
            echo "license-checker output missing" >> ${{ steps.report.outputs.report }}
          fi

          echo "- Trivy scans executed" >> "$REPORT"
          echo "- npm audit run for frontend and ai-gateway" >> "$REPORT"
          echo "- pip-audit run for video-processor" >> "$REPORT"
          echo "- Licenses report generated" >> "$REPORT"
          echo "report=$REPORT" >> $GITHUB_OUTPUT

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: vigil-report
          path: ${{ steps.report.outputs.report }}

      - name: Analyze scan results and create issues for HIGH/CRITICAL only
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          set -e
          mkdir -p vigil-reports
          echo "Analyzing Trivy filesystem results..."
          fs_high=$(jq '[.Results[]?.Vulnerabilities[]? | select((.Severity=="HIGH") or (.Severity=="CRITICAL"))] | length' vigil-reports/trivy-fs.json 2>/dev/null || echo 0)
          echo "FS high/critical count: $fs_high"

          echo "Analyzing Trivy image results..."
          img_total=0
          for j in vigil-reports/trivy-image-*.json; do
            [ -f "$j" ] || continue
            c=$(jq '[.Results[]?.Vulnerabilities[]? | select((.Severity=="HIGH") or (.Severity=="CRITICAL"))] | length' "$j" 2>/dev/null || echo 0)
            img_total=$((img_total + c))
          done
          echo "Image high/critical total: $img_total"

          echo "Analyzing npm audit (frontend)..."
          npm_front=$(jq 'if has("vulnerabilities") then ([ .vulnerabilities | to_entries[]? | .value | select(.severity=="high" or .severity=="critical") ] | length) elif has("advisories") then ([ .advisories | to_entries[]? | .value | select(.severity=="high" or .severity=="critical") ] | length) else 0 end' vigil-reports/npm-audit-frontend.json 2>/dev/null || echo 0)
          echo "Frontend npm high/critical: $npm_front"

          echo "Analyzing npm audit (ai-gateway)..."
          npm_api=$(jq 'if has("vulnerabilities") then ([ .vulnerabilities | to_entries[]? | .value | select(.severity=="high" or .severity=="critical") ] | length) elif has("advisories") then ([ .advisories | to_entries[]? | .value | select(.severity=="high" or .severity=="critical") ] | length) else 0 end' vigil-reports/npm-audit-ai-gateway.json 2>/dev/null || echo 0)
          echo "AI-Gateway npm high/critical: $npm_api"

          echo "Analyzing pip-audit..."
          pip_total=$(jq '[ .[]? | select((.severity=="HIGH") or (.severity=="CRITICAL")) ] | length' vigil-reports/pip-audit-video-processor.json 2>/dev/null || echo 0)
          echo "pip-audit high/critical: $pip_total"

          total=$((fs_high + img_total + npm_front + npm_api + pip_total))
          echo "TOTAL high/critical: $total"

          if [ "$total" -gt 0 ]; then
            echo "Collecting details for issue body..."
            {
              echo "# VIGIL Alerts (High/Critical)"
              echo
              echo "Workflow: $GITHUB_RUN_URL"
              echo
              echo "## Summary"
              echo "- Trivy FS: $fs_high high/critical"
              echo "- Trivy Images: $img_total high/critical"
              echo "- npm audit (frontend): $npm_front high/critical"
              echo "- npm audit (ai-gateway): $npm_api high/critical"
              echo "- pip-audit: $pip_total high/critical"
              echo
              echo "## Details"
              echo "### Trivy FS"
              jq -r '.Results[]?.Vulnerabilities[]? | select((.Severity=="HIGH") or (.Severity=="CRITICAL")) | "- [\(.Severity)] \(.PkgName) \(.InstalledVersion) -> CVE: \(.VulnerabilityID)"' vigil-reports/trivy-fs.json 2>/dev/null || true
              echo
              echo "### Trivy Images"
              for j in vigil-reports/trivy-image-*.json; do
                [ -f "$j" ] || continue
                imgname=$(echo "$j" | sed 's#vigil-reports/trivy-image-##; s#\.json##')
                echo "- Image: $imgname"
                jq -r '.Results[]?.Vulnerabilities[]? | select((.Severity=="HIGH") or (.Severity=="CRITICAL")) | "  - [\(.Severity)] \(.PkgName) \(.InstalledVersion) -> CVE: \(.VulnerabilityID)"' "$j" 2>/dev/null || true
                echo
              done
              echo "### npm audit (frontend)"
              jq -r 'if has("vulnerabilities") then (.vulnerabilities | to_entries[]? | select(.value.severity=="high" or .value.severity=="critical") | "- [\(.value.severity|ascii_upcase)] \(.key) -> via: \(((.value.via // []) | map(type==\"object\" and .name or .) | join(", "))) ") elif has("advisories") then (.advisories | to_entries[]? | select(.value.severity=="high" or .value.severity=="critical") | "- [\(.value.severity|ascii_upcase)] \(.key) -> module: \(.value.module_name // \"\")") else empty end' vigil-reports/npm-audit-frontend.json 2>/dev/null || true

              echo "### License summary"
              echo "See 'License Summary' section in the daily report artifact."

            # Auto-assign to triage team if available
            assignees=""
            if gh api orgs/${{ github.repository_owner }}/teams 1>/dev/null 2>&1; then
              # If a team slug 'security-triage' exists, request assignment via mention in body
              echo "\n\n/cc @${{ github.repository_owner }}/security-triage" >> vigil-reports/ALERT_BODY.md
            fi
            gh issue edit $(gh issue list --search "$title" --state open --json number --jq '.[0].number') --add-label "security"

              echo
              echo "### npm audit (ai-gateway)"
              jq -r 'if has("vulnerabilities") then (.vulnerabilities | to_entries[]? | select(.value.severity=="high" or .value.severity=="critical") | "- [\(.value.severity|ascii_upcase)] \(.key) -> via: \(((.value.via // []) | map(type==\"object\" and .name or .) | join(", "))) ") elif has("advisories") then (.advisories | to_entries[]? | select(.value.severity=="high" or .value.severity=="critical") | "- [\(.value.severity|ascii_upcase)] \(.key) -> module: \(.value.module_name // \"\")") else empty end' vigil-reports/npm-audit-ai-gateway.json 2>/dev/null || true
              echo
              echo "### pip-audit (video-processor)"
              jq -r '.[]? | select((.severity=="HIGH") or (.severity=="CRITICAL")) | "- [\(.severity)] \(.dependency|.name) \(.dependency|.version) -> CVE: \(.id)"' vigil-reports/pip-audit-video-processor.json 2>/dev/null || true
            } > vigil-reports/ALERT_BODY.md

            title="VIGIL: High/Critical findings detected"
            gh issue create --title "$title" --body-file vigil-reports/ALERT_BODY.md --label vigil-alert || true
          else
            echo "No High/Critical findings detected."
          fi

